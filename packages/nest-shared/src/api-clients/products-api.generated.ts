/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getPublic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_protected"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all categories */
        get: operations["CategoriesController_findAll"];
        put?: never;
        /** Create a new category */
        post: operations["CategoriesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a category by ID */
        get: operations["CategoriesController_findOne"];
        put?: never;
        post?: never;
        /** Delete a category */
        delete: operations["CategoriesController_remove"];
        options?: never;
        head?: never;
        /** Update a category */
        patch: operations["CategoriesController_update"];
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List products with filtering and pagination */
        get: operations["ProductsController_findAll"];
        put?: never;
        /** Create a new product */
        post: operations["ProductsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Advanced product search */
        get: operations["ProductsController_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/sku/{sku}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product by SKU */
        get: operations["ProductsController_findBySku"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/category/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get products by category */
        get: operations["ProductsController_findByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product by ID */
        get: operations["ProductsController_findOne"];
        /** Update product */
        put: operations["ProductsController_update"];
        post?: never;
        /** Delete product */
        delete: operations["ProductsController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product variants */
        get: operations["ProductsController_getVariants"];
        put?: never;
        /** Add variant to product */
        post: operations["ProductsController_addVariant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/variants/{variantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update product variant */
        put: operations["ProductsController_updateVariant"];
        post?: never;
        /** Delete product variant */
        delete: operations["ProductsController_removeVariant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product media */
        get: operations["ProductsController_getProductMedia"];
        put?: never;
        /** Attach media to product */
        post: operations["ProductsController_attachMedia"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/media/{mediaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove media from product */
        delete: operations["ProductsController_detachMedia"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/media/{mediaId}/primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set media as primary image */
        put: operations["ProductsController_updatePrimaryImage"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateCategoryDto: {
            /**
             * @description Category name
             * @example Electronics
             */
            name: string;
            /**
             * @description Category slug
             * @example electronics
             */
            slug: string;
            /**
             * @description Parent category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            parentId: string;
        };
        CategoryDto: {
            /**
             * @description Category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Category name
             * @example Electronics
             */
            name: string;
            /**
             * @description Category slug
             * @example electronics
             */
            slug: string;
            /**
             * @description Parent category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            parentId: string;
            /**
             * Format: date-time
             * @description Category created at
             * @example 2021-01-01T00:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Category updated at
             * @example 2021-01-01T00:00:00.000Z
             */
            updatedAt: string;
            /** @description Category children */
            children: components["schemas"]["CategoryDto"][];
        };
        PaginationMeta: {
            /**
             * @description Current page number
             * @example 1
             */
            page: number;
            /**
             * @description Number of items per page
             * @example 10
             */
            limit: number;
            /**
             * @description Total number of items
             * @example 100
             */
            totalCount: number;
            /**
             * @description Total number of pages
             * @example 10
             */
            totalPages: number;
        };
        QueryCategoryResponse: {
            /** @description List of items */
            data: unknown[][];
            /** @description Pagination metadata */
            meta: components["schemas"]["PaginationMeta"];
        };
        UpdateCategoryDto: {
            /**
             * @description Category name
             * @example Electronics
             */
            name: string;
            /**
             * @description Category slug
             * @example electronics
             */
            slug: string;
            /**
             * @description Parent category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            parentId: string;
        };
        CreateProductDto: {
            /**
             * @description Product SKU (Stock Keeping Unit) - must be unique
             * @example LAPTOP-001
             */
            sku: string;
            /**
             * @description Product name
             * @example MacBook Pro 16-inch
             */
            name: string;
            /**
             * @description Product description
             * @example High-performance laptop with M2 chip and 16GB RAM
             */
            description?: string;
            /**
             * @description Product price (must be positive)
             * @example 2499.99
             */
            price: string;
            /**
             * @description Product currency
             * @default USD
             * @example USD
             * @enum {string}
             */
            currency: "USD" | "EUR" | "GBP" | "JPY" | "CAD" | "AUD";
            /**
             * @description Primary image URL
             * @example https://example.com/images/macbook-pro.jpg
             */
            imageUrl?: string;
            /**
             * @description Product active status
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * @description Array of category IDs to assign to this product
             * @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ]
             */
            categoryIds?: string[];
            /** @description Initial product variants to create */
            variants?: {
                /** @example Color */
                name?: string;
                /** @example Space Gray */
                value?: string;
            }[];
        };
        ProductVariantDto: {
            /**
             * @description Variant ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Product ID this variant belongs to
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId: string;
            /**
             * @description Variant name (e.g., Color, Size, Material)
             * @example Color
             */
            name: string;
            /**
             * @description Variant value (e.g., Red, Large, Cotton)
             * @example Red
             */
            value: string;
        };
        ProductMediaDto: {
            /**
             * @description Product media ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Product ID this media belongs to
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId: string;
            /**
             * @description Media URL
             * @example https://example.com/images/product-123.jpg
             */
            url: string;
            /**
             * @description Media ID from media service
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            mediaId: string;
            /**
             * @description Original filename
             * @example product-image.jpg
             */
            originalFilename: string;
            /**
             * @description MIME type
             * @example image/jpeg
             */
            mimeType: string;
            /**
             * @description File size in bytes
             * @example 1024000
             */
            size: number;
            /**
             * @description Media type
             * @example IMAGE
             */
            type: string;
            /**
             * @description Image width in pixels
             * @example 1920
             */
            width?: number;
            /**
             * @description Image height in pixels
             * @example 1080
             */
            height?: number;
        };
        ProductDto: {
            /**
             * @description Product ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Product SKU (Stock Keeping Unit)
             * @example LAPTOP-001
             */
            sku: string;
            /**
             * @description Product name
             * @example MacBook Pro 16-inch
             */
            name: string;
            /**
             * @description Product description
             * @example High-performance laptop with M2 chip
             */
            description?: string;
            /**
             * @description Product price
             * @example 2499.99
             */
            price: string;
            /**
             * @description Product currency
             * @example USD
             * @enum {string}
             */
            currency: "USD" | "EUR" | "GBP" | "JPY" | "CAD" | "AUD";
            /**
             * @description Primary image URL
             * @example https://example.com/images/macbook-pro.jpg
             */
            imageUrl?: string;
            /**
             * @description Product active status
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Product creation date
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Product last update date
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
            /** @description Product categories */
            categories?: components["schemas"]["CategoryDto"][];
            /** @description Product variants */
            variants?: components["schemas"]["ProductVariantDto"][];
            /** @description Product media/images */
            images?: components["schemas"]["ProductMediaDto"][];
        };
        QueryProductResponse: {
            /** @description Array of products */
            items?: components["schemas"]["ProductDto"][];
            /** @description Pagination metadata */
            meta?: {
                /** @example 1 */
                page?: number;
                /** @example 20 */
                limit?: number;
                /** @example 150 */
                total?: number;
                /** @example 8 */
                totalPages?: number;
            };
        };
        UpdateProductDto: {
            /**
             * @description Product SKU (Stock Keeping Unit) - must be unique
             * @example LAPTOP-001-V2
             */
            sku?: string;
            /**
             * @description Product name
             * @example MacBook Pro 16-inch (Updated)
             */
            name?: string;
            /**
             * @description Product description
             * @example High-performance laptop with M2 Pro chip and 32GB RAM
             */
            description?: string;
            /**
             * @description Product price (must be positive)
             * @example 2999.99
             */
            price?: string;
            /**
             * @description Product currency
             * @example EUR
             * @enum {string}
             */
            currency?: "USD" | "EUR" | "GBP" | "JPY" | "CAD" | "AUD";
            /**
             * @description Primary image URL
             * @example https://example.com/images/macbook-pro-updated.jpg
             */
            imageUrl?: string;
            /**
             * @description Product active status
             * @example false
             */
            isActive?: boolean;
            /**
             * @description Array of category IDs to assign to this product (replaces existing categories)
             * @example [
             *       "123e4567-e89b-12d3-a456-426614174000",
             *       "987fcdeb-51a2-43d1-b789-fedcba098765"
             *     ]
             */
            categoryIds?: string[];
        };
        CreateProductVariantDto: {
            /**
             * @description Variant name (e.g., Color, Size, Material)
             * @example Color
             */
            name: string;
            /**
             * @description Variant value (e.g., Red, Large, Cotton)
             * @example Space Gray
             */
            value: string;
        };
        ProductVariantResponseDto: {
            /**
             * @description Variant ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Product ID this variant belongs to
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId: string;
            /**
             * @description Variant name
             * @example Color
             */
            name: string;
            /**
             * @description Variant value
             * @example Space Gray
             */
            value: string;
        };
        UpdateProductVariantDto: {
            /**
             * @description Variant name (e.g., Color, Size, Material)
             * @example Color
             */
            name?: string;
            /**
             * @description Variant value (e.g., Red, Large, Cotton)
             * @example Silver
             */
            value?: string;
        };
        AttachMediaToProductDto: {
            /**
             * @description Media ID from media service to attach to product
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            mediaId: string;
            /**
             * @description Set this media as the primary product image
             * @default false
             * @example true
             */
            isPrimary: boolean;
            /**
             * @description Alternative text for accessibility
             * @example MacBook Pro 16-inch in Space Gray
             */
            altText?: string;
        };
        ProductMediaResponseDto: {
            /**
             * @description Product media ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Product ID this media belongs to
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId: string;
            /**
             * @description Media URL
             * @example https://example.com/images/product-123.jpg
             */
            url: string;
            /**
             * @description Media ID from media service
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            mediaId: string;
            /**
             * @description Original filename
             * @example product-image.jpg
             */
            originalFilename: string;
            /**
             * @description MIME type
             * @example image/jpeg
             */
            mimeType: string;
            /**
             * @description File size in bytes
             * @example 1024000
             */
            size: number;
            /**
             * @description Media type
             * @example IMAGE
             */
            type: string;
            /**
             * @description Image width in pixels
             * @example 1920
             */
            width?: number;
            /**
             * @description Image height in pixels
             * @example 1080
             */
            height?: number;
        };
        DetachMediaFromProductResponseDto: {
            /**
             * @description Product ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId: string;
            /**
             * @description Detached media ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            mediaId: string;
            /**
             * @description Operation success status
             * @example true
             */
            success: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getPublic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_protected: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoriesController_findAll: {
        parameters: {
            query?: {
                /** @description Search query */
                search?: string;
                /** @description Page number */
                page?: number;
                /** @description Limit number */
                limit?: number;
                /** @description Sort by */
                sortBy?: string;
                /** @description Sort order */
                sortOrder?: string;
                /** @description Include total count */
                includeTotalCount?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Categories retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryCategoryResponse"];
                };
            };
        };
    };
    CategoriesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            /** @description Category created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDto"];
                };
            };
        };
    };
    CategoriesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDto"];
                };
            };
        };
    };
    CategoriesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoriesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDto"];
            };
        };
        responses: {
            /** @description Category updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDto"];
                };
            };
        };
    };
    ProductsController_findAll: {
        parameters: {
            query?: {
                /** @description Search term for product name, description, or SKU */
                search?: string;
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
                /** @description Sort by */
                sortBy?: string;
                /** @description Sort order */
                sortOrder?: "asc" | "desc";
                /** @description Include total count */
                includeTotalCount?: boolean;
                /** @description Filter by category ID */
                categoryId?: string;
                /** @description Filter by multiple category IDs */
                categoryIds?: string[];
                /** @description Filter by currency */
                currency?: "USD" | "EUR" | "GBP" | "JPY" | "CAD" | "AUD";
                /** @description Minimum price filter */
                minPrice?: number;
                /** @description Maximum price filter */
                maxPrice?: number;
                /** @description Filter by active status */
                isActive?: boolean;
                /** @description Field to sort by */
                sortField?: "name" | "price" | "sku" | "createdAt" | "updatedAt";
                /** @description Include product variants */
                includeVariants?: boolean;
                /** @description Include product media */
                includeMedia?: boolean;
                /** @description Include product categories */
                includeCategories?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryProductResponse"];
                };
            };
        };
    };
    ProductsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductDto"];
            };
        };
        responses: {
            /** @description Product created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDto"];
                };
            };
            /** @description Bad request - validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - SKU already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_search: {
        parameters: {
            query: {
                /** @description Search term */
                q: string;
                /** @description Search term for product name or description */
                search?: string;
                /** @description Page number (1-based) */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Sort by */
                sortBy?: string;
                /** @description Sort order (asc or desc) */
                sortOrder?: "asc" | "desc";
                /** @description Include total count */
                includeTotalCount?: boolean;
                /** @description Filter by category ID */
                categoryId?: string;
                /** @description Filter by multiple category IDs */
                categoryIds?: string[];
                /** @description Filter by currency */
                currency?: "USD" | "EUR" | "GBP" | "JPY" | "CAD" | "AUD";
                /** @description Minimum price filter */
                minPrice?: number;
                /** @description Maximum price filter */
                maxPrice?: number;
                /** @description Filter by active status */
                isActive?: boolean;
                /** @description Field to sort by */
                sortField?: "name" | "price" | "sku" | "createdAt" | "updatedAt";
                /** @description Include product variants in response */
                includeVariants?: boolean;
                /** @description Include product media/images in response */
                includeMedia?: boolean;
                /** @description Include product categories in response */
                includeCategories?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryProductResponse"];
                };
            };
        };
    };
    ProductsController_findBySku: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product SKU */
                sku: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_findByCategory: {
        parameters: {
            query?: {
                /** @description Search term for product name or description */
                search?: string;
                /** @description Page number (1-based) */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Sort by */
                sortBy?: string;
                /** @description Sort order (asc or desc) */
                sortOrder?: "asc" | "desc";
                /** @description Include total count */
                includeTotalCount?: boolean;
                /** @description Filter by multiple category IDs */
                categoryIds?: string[];
                /** @description Filter by currency */
                currency?: "USD" | "EUR" | "GBP" | "JPY" | "CAD" | "AUD";
                /** @description Minimum price filter */
                minPrice?: number;
                /** @description Maximum price filter */
                maxPrice?: number;
                /** @description Filter by active status */
                isActive?: boolean;
                /** @description Field to sort by */
                sortField?: "name" | "price" | "sku" | "createdAt" | "updatedAt";
                /** @description Include product variants in response */
                includeVariants?: boolean;
                /** @description Include product media/images in response */
                includeMedia?: boolean;
                /** @description Include product categories in response */
                includeCategories?: boolean;
            };
            header?: never;
            path: {
                /** @description Category ID */
                categoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Products in category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryProductResponse"];
                };
            };
        };
    };
    ProductsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductDto"];
            };
        };
        responses: {
            /** @description Product updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - SKU already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_getVariants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product variants */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantResponseDto"][];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_addVariant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductVariantDto"];
            };
        };
        responses: {
            /** @description Variant added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantResponseDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variant already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_updateVariant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
                /** @description Variant ID */
                variantId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductVariantDto"];
            };
        };
        responses: {
            /** @description Variant updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantResponseDto"];
                };
            };
            /** @description Product or variant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variant already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_removeVariant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
                /** @description Variant ID */
                variantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Variant deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Product or variant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_getProductMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product media */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductMediaResponseDto"][];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_attachMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttachMediaToProductDto"];
            };
        };
        responses: {
            /** @description Media attached successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductMediaResponseDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_detachMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
                /** @description Media ID */
                mediaId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetachMediaFromProductResponseDto"];
                };
            };
            /** @description Product or media not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_updatePrimaryImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                id: string;
                /** @description Media ID */
                mediaId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Primary image updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDto"];
                };
            };
            /** @description Product or media not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}

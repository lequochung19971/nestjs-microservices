/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getPublic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_protected"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a single media file */
        post: operations["MediaController_uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/files/upload/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload multiple media files */
        post: operations["MediaController_uploadFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all media files (with pagination and filtering) */
        get: operations["MediaController_getAllMedia"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get media file by ID */
        get: operations["MediaController_getMediaById"];
        /** Update media metadata */
        put: operations["MediaController_updateMedia"];
        post?: never;
        /** Delete media */
        delete: operations["MediaController_deleteMedia"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/files/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get media by IDs */
        post: operations["MediaController_getMediaByIds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List folders with optional filtering */
        get: operations["FolderController_getFolders"];
        put?: never;
        /** Create a new folder */
        post: operations["FolderController_createFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/folders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single folder by ID */
        get: operations["FolderController_getFolderById"];
        /** Update folder details */
        put: operations["FolderController_updateFolder"];
        post?: never;
        /** Delete a folder */
        delete: operations["FolderController_deleteFolder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/folders/{id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get media items in a folder */
        get: operations["FolderController_getMediaInFolder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/folders/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move media items to a folder */
        post: operations["FolderController_moveMediaToFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tags with optional filtering */
        get: operations["TagController_getTags"];
        put?: never;
        /** Create a new tag */
        post: operations["TagController_createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single tag by ID */
        get: operations["TagController_getTagById"];
        /** Update tag details */
        put: operations["TagController_updateTag"];
        post?: never;
        /** Delete a tag */
        delete: operations["TagController_deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/tags/{id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get media items with a specific tag */
        get: operations["TagController_getMediaWithTag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/tags/media/{mediaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tags for a specific media item */
        get: operations["TagController_getTagsForMedia"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/tags/add-to-media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add tags to media items */
        post: operations["TagController_addTagsToMedia"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/tags/remove-from-media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove tags from media items */
        post: operations["TagController_removeTagsFromMedia"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        FileUploadDto: {
            /**
             * Format: binary
             * @description Media file to upload
             */
            file: string;
            /** @description Whether the file is publicly accessible */
            isPublic?: boolean;
            /** @description Path where the file should be stored */
            path?: string;
            /** @description Additional metadata for the file */
            metadata?: {
                [key: string]: unknown;
            };
            /** @description Folder ID where the file should be stored */
            folderId?: string;
        };
        /**
         * @description Type of media
         * @enum {string}
         */
        MediaType: "IMAGE" | "VIDEO" | "AUDIO" | "DOCUMENT";
        MediaVariantResponseDto: {
            /** @description Variant ID */
            id: string;
            /** @description Media ID this variant belongs to */
            mediaId: string;
            /** @description Variant name */
            name: string;
            /** @description Storage path */
            path: string;
            /** @description URL to access the variant */
            url: string;
            /** @description Width of the variant in pixels */
            width?: number;
            /** @description Height of the variant in pixels */
            height?: number;
            /** @description Size of the variant file in bytes */
            size: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        MediaResponseDto: {
            /** @description Media ID */
            id: string;
            /** @description Filename in storage */
            filename: string;
            /** @description Original uploaded filename */
            originalFilename: string;
            /** @description MIME type of the file */
            mimeType: string;
            /** @description Size of the file in bytes */
            size: number;
            /** @description Type of media */
            type: components["schemas"]["MediaType"];
            /** @description Storage provider */
            provider: string;
            /** @description Path in storage */
            path?: string;
            /** @description URL to access the media */
            url: string;
            /** @description Media processing status */
            status: string;
            /** @description ID of the media owner */
            ownerId: string;
            /** @description Whether the media is publicly accessible */
            isPublic: boolean;
            /** @description Additional metadata */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
            /** @description Media variants */
            variants?: components["schemas"]["MediaVariantResponseDto"][];
        };
        BatchFileUploadDto: {
            /** @description Media files to upload */
            files: string[];
            /** @description Whether the files are publicly accessible */
            isPublic?: boolean;
            /** @description Path where the files should be stored */
            path?: string;
            /** @description Additional metadata for the files */
            metadata?: {
                [key: string]: unknown;
            };
            /** @description Folder ID where the files should be stored */
            folderId?: string;
        };
        PaginatedMediaResponseDto: {
            /** @description List of media items */
            items: components["schemas"]["MediaResponseDto"][];
            /**
             * @description Pagination metadata
             * @example {
             *       "page": 1,
             *       "limit": 20,
             *       "total": 100,
             *       "totalPages": 5
             *     }
             */
            meta: Record<string, never>;
        };
        /**
         * @description Status of the media processing
         * @enum {string}
         */
        MediaStatus: "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED";
        /**
         * @description Storage provider for the media
         * @enum {string}
         */
        StorageProvider: "LOCAL" | "S3" | "CLOUDINARY" | "AZURE";
        UpdateMediaDto: {
            /** @description Whether the media is publicly accessible */
            isPublic?: boolean;
            /** @description Additional metadata for the media */
            metadata?: {
                [key: string]: unknown;
            };
            /** @description Path where the media is stored */
            path?: string;
            /** @description Original filename of the media */
            originalFilename?: string;
            /** @description MIME type of the media file */
            mimeType?: string;
            /** @description Media type category */
            type?: components["schemas"]["MediaType"];
            /** @description Status of the media processing */
            status?: components["schemas"]["MediaStatus"];
            /** @description Storage provider for the media */
            provider?: components["schemas"]["StorageProvider"];
            /** @description URL to access the media */
            url?: string;
        };
        DeleteMediaResponseDto: {
            /** @description ID of the deleted media */
            id: string;
            /** @description Whether the deletion was successful */
            success: boolean;
        };
        GetMediaByIdsDto: {
            /** @description Media IDs */
            ids: string[];
        };
        CreateFolderDto: {
            /** @description Name of the folder */
            name: string;
            /** @description ID of the parent folder */
            parentId?: string;
            /** @description ID of the folder owner */
            ownerId: string;
        };
        FolderResponseDto: {
            /** @description Folder ID */
            id: string;
            /** @description Folder name */
            name: string;
            /** @description Parent folder ID */
            parentId?: string | null;
            /** @description ID of the folder owner */
            ownerId: string;
            /** @description Full path of the folder */
            path: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
            /** @description Parent folder details */
            parent?: ({
                [key: string]: unknown;
            } & components["schemas"]["FolderResponseDto"]) | null;
            /** @description Child folders */
            children?: components["schemas"]["FolderResponseDto"][];
        };
        PaginatedFolderResponseDto: {
            /** @description List of folders */
            items: components["schemas"]["FolderResponseDto"][];
            /**
             * @description Pagination metadata
             * @example {
             *       "page": 1,
             *       "limit": 20,
             *       "total": 100,
             *       "totalPages": 5
             *     }
             */
            meta: Record<string, never>;
        };
        UpdateFolderDto: {
            /** @description New name for the folder */
            name?: string;
            /** @description New parent folder ID (null for root folder) */
            parentId?: string | null;
        };
        DeleteFolderResponseDto: {
            /** @description ID of the deleted folder */
            id: string;
            /** @description Whether the deletion was successful */
            success: boolean;
        };
        MoveMediaToFolderDto: {
            /** @description List of media IDs to move */
            mediaIds: string[];
            /** @description Target folder ID */
            folderId: string;
        };
        MoveMediaResponseDto: {
            /** @description Whether the move operation was successful */
            success: boolean;
            /** @description Number of media items moved */
            count: number;
        };
        CreateTagDto: {
            /** @description Tag name */
            name: string;
            /** @description Tag description */
            description?: string;
        };
        TagResponseDto: {
            /** @description Tag ID */
            id: string;
            /** @description Tag name */
            name: string;
            /** @description Tag description */
            description?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        PaginatedTagResponseDto: {
            /** @description List of tags */
            items: components["schemas"]["TagResponseDto"][];
            /**
             * @description Pagination metadata
             * @example {
             *       "page": 1,
             *       "limit": 50,
             *       "total": 100,
             *       "totalPages": 2
             *     }
             */
            meta: Record<string, never>;
        };
        UpdateTagDto: {
            /** @description New tag name */
            name?: string;
            /** @description New tag description */
            description?: string;
        };
        DeleteTagResponseDto: {
            /** @description ID of the deleted tag */
            id: string;
            /** @description Whether the deletion was successful */
            success: boolean;
        };
        AddTagsToMediaDto: {
            /** @description List of media IDs to tag */
            mediaIds: string[];
            /** @description List of tag IDs to apply */
            tagIds: string[];
        };
        TagOperationResponseDto: {
            /** @description Whether the operation was successful */
            success: boolean;
            /** @description Number of affected items */
            count?: number;
        };
        RemoveTagsFromMediaDto: {
            /** @description List of media IDs to remove tags from */
            mediaIds: string[];
            /** @description List of tag IDs to remove */
            tagIds: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getPublic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_protected: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaController_uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadDto"];
            };
        };
        responses: {
            /** @description Media file uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaResponseDto"];
                };
            };
        };
    };
    MediaController_uploadFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["BatchFileUploadDto"];
            };
        };
        responses: {
            /** @description Media files uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaResponseDto"][];
                };
            };
        };
    };
    MediaController_getAllMedia: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Filter by media type */
                type?: components["schemas"]["MediaType"];
                /** @description Search by filename */
                search?: string;
                /** @description Filter by tags */
                tags?: string[];
                /** @description Filter by folder ID */
                folderId?: string;
                /** @description Filter by owner ID */
                ownerId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of media files */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMediaResponseDto"];
                };
            };
        };
    };
    MediaController_getMediaById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Media ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media file details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaResponseDto"];
                };
            };
        };
    };
    MediaController_updateMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Media ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMediaDto"];
            };
        };
        responses: {
            /** @description Media updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaResponseDto"];
                };
            };
        };
    };
    MediaController_deleteMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Media ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteMediaResponseDto"];
                };
            };
        };
    };
    MediaController_getMediaByIds: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetMediaByIdsDto"];
            };
        };
        responses: {
            /** @description Media by IDs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaResponseDto"][];
                };
            };
        };
    };
    FolderController_getFolders: {
        parameters: {
            query?: {
                /** @description Filter by parent folder ID */
                parentId?: string;
                /** @description Search by folder name */
                search?: string;
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
                /** @description ID of the folder owner */
                ownerId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of folders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedFolderResponseDto"];
                };
            };
        };
    };
    FolderController_createFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFolderDto"];
            };
        };
        responses: {
            /** @description Folder created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderResponseDto"];
                };
            };
        };
    };
    FolderController_getFolderById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Folder ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Folder details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderResponseDto"];
                };
            };
        };
    };
    FolderController_updateFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Folder ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFolderDto"];
            };
        };
        responses: {
            /** @description Folder updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderResponseDto"];
                };
            };
        };
    };
    FolderController_deleteFolder: {
        parameters: {
            query?: {
                /** @description Whether to delete folder contents */
                deleteContents?: boolean;
            };
            header?: never;
            path: {
                /** @description Folder ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Folder deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteFolderResponseDto"];
                };
            };
        };
    };
    FolderController_getMediaInFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Folder ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media items in the folder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaResponseDto"][];
                };
            };
        };
    };
    FolderController_moveMediaToFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MoveMediaToFolderDto"];
            };
        };
        responses: {
            /** @description Media items moved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MoveMediaResponseDto"];
                };
            };
        };
    };
    TagController_getTags: {
        parameters: {
            query?: {
                /** @description Search by tag name */
                search?: string;
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tags */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTagResponseDto"];
                };
            };
        };
    };
    TagController_createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTagDto"];
            };
        };
        responses: {
            /** @description Tag created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagResponseDto"];
                };
            };
        };
    };
    TagController_getTagById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagResponseDto"];
                };
            };
        };
    };
    TagController_updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTagDto"];
            };
        };
        responses: {
            /** @description Tag updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagResponseDto"];
                };
            };
        };
    };
    TagController_deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteTagResponseDto"];
                };
            };
        };
    };
    TagController_getMediaWithTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media items with the tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaResponseDto"][];
                };
            };
        };
    };
    TagController_getTagsForMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Media ID */
                mediaId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tags for the media item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagResponseDto"][];
                };
            };
        };
    };
    TagController_addTagsToMedia: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddTagsToMediaDto"];
            };
        };
        responses: {
            /** @description Tags added to media items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagOperationResponseDto"];
                };
            };
        };
    };
    TagController_removeTagsFromMedia: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveTagsFromMediaDto"];
            };
        };
        responses: {
            /** @description Tags removed from media items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagOperationResponseDto"];
                };
            };
        };
    };
}

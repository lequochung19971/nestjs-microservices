/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getPublic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_protected"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warehouses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List warehouses with filtering and pagination */
        get: operations["WarehousesController_findAll"];
        put?: never;
        /** Create a new warehouse */
        post: operations["WarehousesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warehouses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get warehouse by ID */
        get: operations["WarehousesController_findOne"];
        /** Update warehouse */
        put: operations["WarehousesController_update"];
        post?: never;
        /** Delete warehouse (soft delete) */
        delete: operations["WarehousesController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List inventory items with filtering and pagination */
        get: operations["InventoryItemsController_findAll"];
        put?: never;
        /** Create a new inventory item */
        post: operations["InventoryItemsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-items/warehouse/{warehouseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get inventory items by warehouse */
        get: operations["InventoryItemsController_findByWarehouse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-items/product/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get inventory items by product */
        get: operations["InventoryItemsController_findByProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get inventory item by ID */
        get: operations["InventoryItemsController_findOne"];
        /** Update inventory item */
        put: operations["InventoryItemsController_update"];
        post?: never;
        /** Delete inventory item */
        delete: operations["InventoryItemsController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-items/{id}/quantity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Adjust inventory item quantity */
        put: operations["InventoryItemsController_adjustQuantity"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List inventory transactions with filtering and pagination */
        get: operations["InventoryTransactionsController_findAll"];
        put?: never;
        /** Create a new inventory transaction */
        post: operations["InventoryTransactionsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-transactions/item/{inventoryItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transactions for a specific inventory item */
        get: operations["InventoryTransactionsController_findByInventoryItem"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-transactions/item/{inventoryItemId}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transaction summary for an inventory item */
        get: operations["InventoryTransactionsController_getTransactionSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-transactions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get inventory transaction by ID */
        get: operations["InventoryTransactionsController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List inventory reservations with filtering and pagination */
        get: operations["InventoryReservationsController_findAll"];
        put?: never;
        /** Create a new inventory reservation */
        post: operations["InventoryReservationsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-reservations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get inventory reservation by ID */
        get: operations["InventoryReservationsController_findOne"];
        /** Update inventory reservation */
        put: operations["InventoryReservationsController_update"];
        post?: never;
        /** Delete inventory reservation */
        delete: operations["InventoryReservationsController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-reservations/{id}/fulfill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Fulfill inventory reservation */
        put: operations["InventoryReservationsController_fulfill"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-reservations/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Cancel inventory reservation */
        put: operations["InventoryReservationsController_cancel"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-reservations/process-expired": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process expired reservations */
        post: operations["InventoryReservationsController_processExpiredReservations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateWarehouseDto: {
            /**
             * @description Warehouse name
             * @example Main Warehouse
             */
            name: string;
            /**
             * @description Warehouse address
             * @example 123 Main St, City, State 12345
             */
            address?: string;
            /**
             * @description Whether the warehouse is active
             * @default true
             * @example true
             */
            isActive: boolean;
        };
        WarehouseDto: {
            /**
             * @description Warehouse ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Warehouse name
             * @example Main Warehouse
             */
            name: string;
            /**
             * @description Warehouse address
             * @example 123 Main St, City, State 12345
             */
            address?: string;
            /**
             * @description Whether the warehouse is active
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Warehouse creation date
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Warehouse last update date
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        QueryResponse: {
            /** @description Array of items */
            items: unknown[];
            /** @description Pagination metadata */
            pagination: Record<string, never>;
        };
        UpdateWarehouseDto: {
            /**
             * @description Warehouse name
             * @example Updated Warehouse Name
             */
            name?: string;
            /**
             * @description Warehouse address
             * @example 456 Updated St, City, State 12345
             */
            address?: string;
            /**
             * @description Whether the warehouse is active
             * @example false
             */
            isActive?: boolean;
        };
        CreateInventoryItemDto: {
            /**
             * @description Warehouse ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            warehouseId: string;
            /**
             * @description Initial quantity
             * @example 100
             */
            quantity: number;
            /**
             * @description Inventory status
             * @default AVAILABLE
             * @example AVAILABLE
             * @enum {string}
             */
            status: "AVAILABLE" | "RESERVED" | "SOLD" | "DAMAGED" | "RETURNED";
            /**
             * @description Reorder point - when to trigger reorder
             * @example 20
             */
            reorderPoint?: number;
            /**
             * @description Reorder quantity - how much to order
             * @example 50
             */
            reorderQuantity?: number;
        };
        InventoryItemDto: {
            /**
             * @description Inventory item ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Warehouse ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            warehouseId: string;
            /**
             * @description Current quantity in stock
             * @example 100
             */
            quantity: number;
            /**
             * @description Reserved quantity
             * @example 10
             */
            reservedQuantity: number;
            /**
             * @description Inventory status
             * @example AVAILABLE
             * @enum {string}
             */
            status: "AVAILABLE" | "RESERVED" | "SOLD" | "DAMAGED" | "RETURNED";
            /**
             * @description Reorder point - when to trigger reorder
             * @example 20
             */
            reorderPoint?: number;
            /**
             * @description Reorder quantity - how much to order
             * @example 50
             */
            reorderQuantity?: number;
            /**
             * Format: date-time
             * @description Last update date
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        UpdateInventoryItemDto: {
            /**
             * @description New quantity
             * @example 150
             */
            quantity?: number;
            /**
             * @description Inventory status
             * @example RESERVED
             * @enum {string}
             */
            status?: "AVAILABLE" | "RESERVED" | "SOLD" | "DAMAGED" | "RETURNED";
            /**
             * @description Reorder point - when to trigger reorder
             * @example 25
             */
            reorderPoint?: number;
            /**
             * @description Reorder quantity - how much to order
             * @example 75
             */
            reorderQuantity?: number;
        };
        AdjustQuantityDto: {
            /**
             * @description Quantity adjustment (positive to add, negative to subtract)
             * @example 10
             */
            quantity: number;
            /**
             * @description Notes about the adjustment
             * @example Stock received from supplier
             */
            notes?: string;
        };
        CreateInventoryTransactionDto: {
            /**
             * @description Inventory item ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            inventoryItemId: string;
            /**
             * @description Transaction quantity (positive for additions, negative for subtractions)
             * @example 10
             */
            quantity: number;
            /**
             * @description Transaction type
             * @example PURCHASE
             * @enum {string}
             */
            type: "PURCHASE" | "SALE" | "RETURN" | "ADJUSTMENT" | "TRANSFER";
            /**
             * @description Reference ID (e.g., order ID, purchase ID)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description Reference type (e.g., "order", "purchase")
             * @example order
             */
            referenceType?: string;
            /**
             * @description Transaction notes
             * @example Stock received from supplier ABC
             */
            notes?: string;
        };
        InventoryTransactionDto: {
            /**
             * @description Transaction ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Inventory item ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            inventoryItemId: string;
            /**
             * @description Transaction quantity (positive for additions, negative for subtractions)
             * @example 10
             */
            quantity: number;
            /**
             * @description Transaction type
             * @example PURCHASE
             * @enum {string}
             */
            type: "PURCHASE" | "SALE" | "RETURN" | "ADJUSTMENT" | "TRANSFER";
            /**
             * @description Reference ID (e.g., order ID, purchase ID)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description Reference type (e.g., "order", "purchase")
             * @example order
             */
            referenceType?: string;
            /**
             * @description Transaction notes
             * @example Stock received from supplier ABC
             */
            notes?: string;
            /**
             * Format: date-time
             * @description Transaction creation date
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * @description User who created the transaction
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            createdBy?: string;
        };
        CreateInventoryReservationDto: {
            /**
             * @description Inventory item ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            inventoryItemId: string;
            /**
             * @description Quantity to reserve
             * @example 5
             */
            quantity: number;
            /**
             * @description Order ID this reservation is for
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            orderId: string;
            /**
             * Format: date-time
             * @description Reservation expiration date
             * @example 2024-01-22T10:30:00Z
             */
            expiresAt?: string;
        };
        InventoryReservationDto: {
            /**
             * @description Reservation ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Inventory item ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            inventoryItemId: string;
            /**
             * @description Reserved quantity
             * @example 5
             */
            quantity: number;
            /**
             * @description Order ID this reservation is for
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            orderId: string;
            /**
             * Format: date-time
             * @description Reservation expiration date
             * @example 2024-01-22T10:30:00Z
             */
            expiresAt?: string;
            /**
             * @description Reservation status
             * @example ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "FULFILLED" | "CANCELLED" | "EXPIRED";
            /**
             * Format: date-time
             * @description Reservation creation date
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Reservation last update date
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        UpdateInventoryReservationDto: {
            /**
             * @description Quantity to reserve
             * @example 8
             */
            quantity?: number;
            /**
             * Format: date-time
             * @description Reservation expiration date
             * @example 2024-01-25T10:30:00Z
             */
            expiresAt?: string;
        };
        FulfillReservationDto: {
            /**
             * @description Notes about fulfillment
             * @example Order shipped successfully
             */
            notes?: string;
        };
        CancelReservationDto: {
            /**
             * @description Reason for cancellation
             * @example Customer cancelled order
             */
            reason?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getPublic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_protected: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WarehousesController_findAll: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
                /** @description Field to sort by */
                sortField?: string;
                /** @description Sort order */
                sortOrder?: string;
                /** @description Search term for warehouse name or address */
                search?: string;
                /** @description Filter by active status */
                isActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of warehouses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
        };
    };
    WarehousesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWarehouseDto"];
            };
        };
        responses: {
            /** @description Warehouse created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarehouseDto"];
                };
            };
            /** @description Bad request - validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - warehouse name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WarehousesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Warehouse ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Warehouse details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarehouseDto"];
                };
            };
            /** @description Warehouse not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WarehousesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Warehouse ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWarehouseDto"];
            };
        };
        responses: {
            /** @description Warehouse updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarehouseDto"];
                };
            };
            /** @description Warehouse not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - warehouse name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WarehousesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Warehouse ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Warehouse deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarehouseDto"];
                };
            };
            /** @description Warehouse not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemsController_findAll: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
                /** @description Field to sort by */
                sortField?: string;
                /** @description Sort order */
                sortOrder?: string;
                /** @description Filter by warehouse ID */
                warehouseId?: string;
                /** @description Filter by product ID */
                productId?: string;
                /** @description Filter by inventory status */
                status?: string;
                /** @description Filter by low stock (below reorder point) */
                lowStock?: boolean;
                /** @description Filter by out of stock */
                outOfStock?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of inventory items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
        };
    };
    InventoryItemsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryItemDto"];
            };
        };
        responses: {
            /** @description Inventory item created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemDto"];
                };
            };
            /** @description Bad request - validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Warehouse not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemsController_findByWarehouse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Warehouse ID */
                warehouseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory items in warehouse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemDto"][];
                };
            };
            /** @description Warehouse not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemsController_findByProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                productId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory items for product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemDto"][];
                };
            };
        };
    };
    InventoryItemsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inventory item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory item details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemDto"];
                };
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inventory item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryItemDto"];
            };
        };
        responses: {
            /** @description Inventory item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemDto"];
                };
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inventory item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory item deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemDto"];
                };
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemsController_adjustQuantity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inventory item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdjustQuantityDto"];
            };
        };
        responses: {
            /** @description Quantity adjusted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemDto"];
                };
            };
            /** @description Insufficient stock or validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryTransactionsController_findAll: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
                /** @description Field to sort by */
                sortField?: string;
                /** @description Sort order */
                sortOrder?: string;
                /** @description Filter by inventory item ID */
                inventoryItemId?: string;
                /** @description Filter by transaction type */
                type?: string;
                /** @description Filter by reference ID */
                referenceId?: string;
                /** @description Filter by reference type */
                referenceType?: string;
                /** @description Filter by date range - start date */
                startDate?: string;
                /** @description Filter by date range - end date */
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of inventory transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
        };
    };
    InventoryTransactionsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryTransactionDto"];
            };
        };
        responses: {
            /** @description Inventory transaction created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryTransactionDto"];
                };
            };
            /** @description Bad request - validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryTransactionsController_findByInventoryItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inventory item ID */
                inventoryItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transactions for inventory item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryTransactionDto"][];
                };
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryTransactionsController_getTransactionSummary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inventory item ID */
                inventoryItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction summary */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        totalPurchases?: number;
                        totalSales?: number;
                        totalReturns?: number;
                        totalAdjustments?: number;
                        totalTransfers?: number;
                    };
                };
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryTransactionsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryTransactionDto"];
                };
            };
            /** @description Transaction not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReservationsController_findAll: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
                /** @description Field to sort by */
                sortField?: string;
                /** @description Sort order */
                sortOrder?: string;
                /** @description Filter by inventory item ID */
                inventoryItemId?: string;
                /** @description Filter by order ID */
                orderId?: string;
                /** @description Filter by reservation status */
                status?: string;
                /** @description Filter by expired reservations */
                expired?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of inventory reservations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
        };
    };
    InventoryReservationsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryReservationDto"];
            };
        };
        responses: {
            /** @description Inventory reservation created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryReservationDto"];
                };
            };
            /** @description Bad request - validation failed or insufficient stock */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReservationsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reservation details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryReservationDto"];
                };
            };
            /** @description Reservation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReservationsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryReservationDto"];
            };
        };
        responses: {
            /** @description Reservation updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryReservationDto"];
                };
            };
            /** @description Bad request - validation failed or invalid status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Reservation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReservationsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reservation deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryReservationDto"];
                };
            };
            /** @description Reservation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReservationsController_fulfill: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FulfillReservationDto"];
            };
        };
        responses: {
            /** @description Reservation fulfilled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryReservationDto"];
                };
            };
            /** @description Bad request - invalid status or expired reservation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Reservation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReservationsController_cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelReservationDto"];
            };
        };
        responses: {
            /** @description Reservation cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryReservationDto"];
                };
            };
            /** @description Bad request - invalid status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Reservation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReservationsController_processExpiredReservations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Expired reservations processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        processedCount?: number;
                    };
                };
            };
        };
    };
}
